name: Build RDDB (prod)

on:
  push:
    branches: [ main ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}/Rubberduck.Database

    - uses: actions/checkout@v2
    - run: mkdir -p ${{env.SOLUTION_FILE_PATH}}/artifacts

    - uses: actions/upload-artifact@v2
      with:
        name: db
        path: '${{env.SOLUTION_FILE_PATH}}\Rubberduck.Database\bin\$${{env.BUILD_CONFIGURATION}}\Rubberduck.Database.dacpac'

  deploy:
      needs: build
      runs-on: windows-latest
      steps:
      # download build artifacts which holds the dacpac
      - name: download build artifacts
        uses: actions/download-artifact@master
        with: 
          name: db
          path: ${{env.SOLUTION_FILE_PATH}}/artifacts

      # deploy dacpac calling my dacpac-deploy task
      - name: update database schema using dacpac deploy action
        uses: abelsquidhead/dacpac-deploy@master
        with:
          connectionString: ${{ secrets.RDAPI_RUBBERDUCKDB }}
          dacpac: '${{env.SOLUTION_FILE_PATH}}/artifacts/Rubberduck.Database.dacpac'
          additionalArguments: '/p:BlockOnPossibleDataLoss=False'
