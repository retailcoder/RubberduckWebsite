<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rubberduck.API</name>
    </assembly>
    <members>
        <member name="T:Rubberduck.API.ConfigureSwaggerGenOptions">
            <summary>
            Configures Swagger generation options.
            </summary>
        </member>
        <member name="M:Rubberduck.API.ConfigureSwaggerGenOptions.Configure(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Invoked to configure a SwaggerGenOptions instance.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Controllers.Authenticated.ContentController">
            <summary>
            Exposes endpoints providing an interface to manipulate the website's dynamic content.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.#ctor(Microsoft.Extensions.Logging.ILogger{Rubberduck.API.Controllers.Authenticated.ContentController},Rubberduck.API.Services.Abstract.IContentServices)">
            <summary>
            Creates a controller that exposes endpoints providing an interface to manipulate the website's dynamic content.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.Feature)">
            <summary>
            Creates a new feature (or sub-feature), or updates an existing one.
            </summary>
            <param name="dto">The feature (or sub-feature) to save.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.FeatureItem)">
            <summary>
            Creates a new feature item, or updates an existing one.
            </summary>
            <param name="dto">The feature item to save.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.Example)">
            <summary>
            Creates a new example, or updates an existing one.
            </summary>
            <param name="dto">The example to save.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.ExampleModule)">
            <summary>
            Creates a new example code module, or updates an existing one.
            </summary>
            <param name="dto">The example code module to save.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.Tag)">
            <summary>
            Creates or updates the specified tag.
            </summary>
            <param name="dto">The tag to save.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.ContentController.SaveAsync(Rubberduck.Model.DTO.TagAsset)">
            <summary>
            Creates or updates the specified tag asset.
            </summary>
            <param name="dto">The tag asset to save.</param>
        </member>
        <member name="T:Rubberduck.API.Controllers.Authenticated.GitHubController">
            <summary>
            Exposes endpoints providing an interface to retrieve content from GitHub.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.GitHubController.#ctor(Microsoft.Extensions.Logging.ILogger{Rubberduck.API.Controllers.Authenticated.GitHubController},Rubberduck.API.Services.Abstract.IGitHubDataServices)">
            <summary>
            A controller that exposes endpoints providing an interface to retrieve content from GitHub.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.GitHubController.GetAllTagsAsync">
            <summary>
            Gets metadata for every tag that ever was.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.GitHubController.GetLatestReleaseAsync">
            <summary>
            Gets metadata about the current latest release tag.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.GitHubController.GetTagAsync(System.String)">
            <summary>
            Gets metadata about the specified tag.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.GitHubController.GetInspectionDefaultsAsync">
            <summary>
            Gets the current inspection default settings (inspection type and severity) configuration.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Controllers.Authenticated.XmlDocAssetsController">
            <summary>
            Exposes endpoints providing an interface to download xmldoc assets.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.XmlDocAssetsController.#ctor(Microsoft.Extensions.Logging.ILogger{Rubberduck.API.Controllers.Authenticated.XmlDocAssetsController},Rubberduck.API.Services.Abstract.IXmlDocServices,RubberduckServices.Abstract.ISyntaxHighlighterService)">
            <summary>
            Creates a controller that exposes endpoints providing an interface to download xmldoc assets.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.XmlDocAssetsController.UpdateXmlDocContentAsync">
            <summary>
            Gets the latest release and pre-release tags, downloads xmldoc assets, and processes them.
            </summary>
            <returns>If successful, the number of milliseconds elapsed while processing the request.</returns>
        </member>
        <member name="M:Rubberduck.API.Controllers.Authenticated.XmlDocAssetsController.GetFormattedCodeModuleAsync(System.String)">
            <summary>
            Parses and formats the provided code string.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Controllers.HealthController">
            <summary>
            A controller that exposes an endpoint that runs quick checks periodically.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.HealthController.#ctor(Microsoft.Extensions.Logging.ILogger{Rubberduck.API.Controllers.HealthController},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Feature},RubberduckServices.Abstract.IIndenterService,Rubberduck.API.Services.Abstract.IGitHubDataServices)">
            <summary>
            Creates a controller that exposes an endpoint that runs quick checks periodically.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.HealthController.CheckAsync">
            <summary>
            Runs a number of internal quick checks to ensure base services are operational.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Controllers.PublicController">
            <summary>
            Exposes endpoints providing the website's dynamic content.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.#ctor(Microsoft.Extensions.Logging.ILogger{Rubberduck.API.Controllers.PublicController},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Feature},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.FeatureItem},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Tag},RubberduckServices.Abstract.IIndenterService)">
            <summary>
            Creates a controller that exposes endpoints providing the website's dynamic content.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.GetFeaturesAsync">
            <summary>
            Gets all features, sub-features, and feature items.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.GetFeatureItem(System.Int32)">
            <summary>
            Gets the specified feature item, including its examples and their respective modules.
            </summary>
            <param name="id">The internal ID of the feature item to get.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.GetLatestTagsAsync">
            <summary>
            Gets the latest release and prerelease tags.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.GetTagAssets(System.Int32)">
            <summary>
            Gets the xmldoc assets for the specified tag.
            </summary>
            <param name="id">The internal ID of the tag to get assets for.</param>
        </member>
        <member name="M:Rubberduck.API.Controllers.PublicController.IndentAsync(Rubberduck.API.DTO.IndenterViewModel)">
            <summary>
            Gets the supplied code, indented as per specified settings.
            </summary>
            <param name="viewModel">The indenter request details.</param>
            <returns>An array of string, each element being an indented physical line of code.</returns>
        </member>
        <member name="T:Rubberduck.API.Services.Abstract.IContentServices">
            <summary>
            Encapsulates CRUD operations against content entities.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.Feature)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.FeatureItem)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.Example)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.ExampleModule)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.Tag)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IContentServices.SaveAsync(Rubberduck.Model.DTO.TagAsset)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Services.Abstract.IGitHubDataServices">
            <summary>
            A service that queries GitHub.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IGitHubDataServices.GetTag(System.String)">
            <summary>
            Gets the specified tag, or the latest release tag if not specified.
            </summary>
            <param name="name">The name of the tag to retrieve.</param>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IGitHubDataServices.GetAllTags">
            <summary>
            Gets all tags, without their assets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IGitHubDataServices.GetCodeAnalysisDefaultsConfig">
            <summary>
            Gets the inspection types and severity overrides for each code inspection.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Services.Abstract.IXmlDocServices">
            <summary>
            A service that orchestrates the synchronization of xmldoc content.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.Abstract.IXmlDocServices.SynchronizeAsync">
            <summary>
            Gets the xmldoc assets from the latest release and prerelease tags, and processes/merges them into the database.
            </summary>
        </member>
        <member name="T:Rubberduck.API.Services.ContentServices">
            <summary>
            Regroups content writer service implementations.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.#ctor(Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Feature},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.Feature},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.FeatureItem},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.FeatureItem},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Example},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.Example},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.ExampleModule},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.ExampleModule},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.Tag},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.Tag},Rubberduck.ContentServices.Service.Abstract.IContentReaderService{Rubberduck.Model.Entity.TagAsset},Rubberduck.ContentServices.Service.Abstract.IContentWriterService{Rubberduck.Model.Entity.TagAsset})">
            <summary>
            Creates a new service to orchestrate data access.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.Feature)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.FeatureItem)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.Example)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.ExampleModule)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.Tag)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="M:Rubberduck.API.Services.ContentServices.SaveAsync(Rubberduck.Model.DTO.TagAsset)">
            <summary>
            Inserts or updates the specified data object.
            </summary>
        </member>
        <member name="T:Rubberduck.API.DTO.IndenterViewModel">
            <summary>
            Encapsulates a request to indent some code.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.Code">
            <summary>
            The code to indent. Expects <c>\r\n</c> line endings.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.ForceDebugPrintInColumn1">
            <summary>
            If true, forces all Debug.Print to appear in column 1 regardless of indent.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.VerticallySpaceProcedures">
            <summary>
            If true, ensures consistent vertical spacing between procedures; controlled by <see cref="P:Rubberduck.API.DTO.IndenterViewModel.LinesBetweenProcedures"/>.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentSpaces">
            <summary>
            The number of spaces per indent step.
            </summary>
            <remarks>Default value is 4.</remarks>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.EndOfLineCommentColumnSpaceAlignment">
            <summary>
            The column to align end-of-line comments at.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.EmptyLineHandlingMethod">
            <summary>
            Controls whether empty lines are ignored (left as-is), removed, or indented (default).
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.EndOfLineCommentStyle">
            <summary>
            Controls how end-of-line comments are indented; absolute, same-gap, standard gap, or aligned in a column.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.AlignDimColumn">
            <summary>
            The column to align <c>Dim</c> statements at.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.AlignDims">
            <summary>
            Whether to align <c>Dim</c> statements at a particular column, controlled by <see cref="P:Rubberduck.API.DTO.IndenterViewModel.AlignDimColumn"/>.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentCompilerDirectives">
            <summary>
            If true, precompiler directives will be indented.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.ForceCompilerDirectivesInColumn1">
            <summary>
            If true, precompiler directives will be forced to column 1.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.ForceStopInColumn1">
            <summary>
            If true, <c>Stop</c> statements will be forced to column 1.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.ForceDebugAssertInColumn1">
            <summary>
            If true, <c>Debug.Assert</c> statements will be forced to column 1.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.GroupRelatedProperties">
            <summary>
            If true, same-name property members will be consistently regrouped.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.ForceDebugStatementsInColumn1">
            <summary>
            If true, <c>Debug</c> statements will be forced to column 1.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentCase">
            <summary>
            If true, <c>Case</c> statements will be indented one level under the corresponding <c>Select Case</c> statement.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IgnoreOperatorsInContinuations">
            <summary>
            If true, operators will be ignored when indenting line-continuated statements.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.AlignContinuations">
            <summary>
            If true, line continuations wil be aligned.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.AlignCommentsWithCode">
            <summary>
            If true, comments will be aligned with the code.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IgnoreEmptyLinesInFirstBlocks">
            <summary>
            If true, empty line in the first block of a procedure will be ignored.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentFirstDeclarationBlock">
            <summary>
            If true, a block of declarations at the top of a procedure will be indented.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentFirstCommentBlock">
            <summary>
            If true, the first comments block of a procedure will be indented.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentEnumTypeAsProcedure">
            <summary>
            If true, <c>Enum</c> members will be indented.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.IndentEntireProcedureBody">
            <summary>
            If true, procedure scopes add an indent level.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.IndenterViewModel.LinesBetweenProcedures">
            <summary>
            The number of empty lines between procedures.
            </summary>
        </member>
        <member name="T:Rubberduck.API.DTO.InspectionDefaultConfig">
            <summary>
            Encapsulates the inspection type and default severity setting override for an inspection.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.InspectionDefaultConfig.InspectionName">
            <summary>
            Get/sets the name (unique) of the inspection.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.InspectionDefaultConfig.InspectionType">
            <summary>
            Gets/sets the type of inspection.
            </summary>
        </member>
        <member name="P:Rubberduck.API.DTO.InspectionDefaultConfig.DefaultSeverity">
            <summary>
            Gets/sets the default severity setting value.
            </summary>
        </member>
    </members>
</doc>
